{"ast":null,"code":"var _jsxFileName = \"E:\\\\workspace\\\\reactjs\\\\my-project-01-vote-for-me\\\\CNPMM_Vote-For-Me\\\\twitter-project\\\\front-end\\\\src\\\\components\\\\PostList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect } from 'react';\nimport '../css/Post.css';\nimport PostItem from './PostItem';\nimport axios from \"axios\";\nimport AppContext from './AppContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PostList() {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  const {\n    posts,\n    user\n  } = state; // useCallback khong tao lai khi chay vao\n\n  const getAllPosts = useCallback(async () => {\n    try {\n      const option = {\n        method: \"get\",\n        url: \"/api/v1/posts\"\n      };\n      const response = await axios(option);\n      const posts = response.data.data.posts;\n      dispatch({\n        type: \"GET_ALL_POSTS\",\n        payload: posts\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }, [dispatch]);\n  useEffect(() => {\n    getAllPosts();\n  }, [getAllPosts]);\n  const newPosts = posts.map(post => {\n    if (user) {\n      return post.author.name === user.userName ? { ...post,\n        isEditable: true\n      } : post;\n    } else {\n      return { ...post,\n        isEditable: false\n      };\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"post-section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: newPosts.map(post => /*#__PURE__*/_jsxDEV(PostItem, {\n        post: post\n      }, post._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PostList, \"JieBvT0RWMGCDCBgR1BGgfucqIU=\");\n\n_c = PostList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostList\");","map":{"version":3,"sources":["E:/workspace/reactjs/my-project-01-vote-for-me/CNPMM_Vote-For-Me/twitter-project/front-end/src/components/PostList.js"],"names":["React","useCallback","useContext","useEffect","PostItem","axios","AppContext","PostList","state","dispatch","posts","user","getAllPosts","option","method","url","response","data","type","payload","error","console","log","newPosts","map","post","author","name","userName","isEditable","_id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,UAA5B,EAAwCC,SAAxC,QAAwD,OAAxD;AACA,OAAO,iBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AAC/B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAqBP,UAAU,CAACI,UAAD,CAArC;AACA,QAAM;AAACI,IAAAA,KAAD;AAAQC,IAAAA;AAAR,MAAgBH,KAAtB,CAF+B,CAI/B;;AACA,QAAMI,WAAW,GAAGX,WAAW,CAAC,YAAY;AACxC,QAAG;AACC,YAAMY,MAAM,GAAG;AACXC,QAAAA,MAAM,EAAE,KADG;AAEXC,QAAAA,GAAG,EAAE;AAFM,OAAf;AAIA,YAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACQ,MAAD,CAA5B;AACA,YAAMH,KAAK,GAAGM,QAAQ,CAACC,IAAT,CAAcA,IAAd,CAAmBP,KAAjC;AACAD,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,OAAO,EAAET;AAAlC,OAAD,CAAR;AACH,KARD,CAQE,OAAMU,KAAN,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,GAZ8B,EAY5B,CAACX,QAAD,CAZ4B,CAA/B;AAcAN,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,WAAW;AACd,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT;AAIA,QAAMW,QAAQ,GAAGb,KAAK,CAACc,GAAN,CAAWC,IAAD,IAAU;AACjC,QAAGd,IAAH,EAAQ;AACJ,aAAOc,IAAI,CAACC,MAAL,CAAYC,IAAZ,KAAqBhB,IAAI,CAACiB,QAA1B,GACD,EAAC,GAAGH,IAAJ;AAAUI,QAAAA,UAAU,EAAE;AAAtB,OADC,GAEDJ,IAFN;AAGH,KAJD,MAIO;AACH,aAAO,EAAC,GAAGA,IAAJ;AAAUI,QAAAA,UAAU,EAAE;AAAtB,OAAP;AACH;AACJ,GARgB,CAAjB;AAUA,sBACI;AAAS,IAAA,SAAS,EAAC,cAAnB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBAEKN,QAAQ,CAACC,GAAT,CAAcC,IAAD,iBACV,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEA;AAAhB,SAA2BA,IAAI,CAACK,GAAhC;AAAA;AAAA;AAAA;AAAA,cADH;AAFL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GA3CuBvB,Q;;KAAAA,Q","sourcesContent":["import React, {useCallback, useContext, useEffect} from 'react'\r\nimport '../css/Post.css'\r\nimport PostItem from './PostItem'\r\n\r\nimport axios from \"axios\"\r\nimport AppContext from './AppContext'\r\n\r\nexport default function PostList() {\r\n    const { state, dispatch} = useContext(AppContext);\r\n    const {posts, user} = state;\r\n\r\n    // useCallback khong tao lai khi chay vao\r\n    const getAllPosts = useCallback(async () => {\r\n        try{\r\n            const option = {\r\n                method: \"get\",\r\n                url: \"/api/v1/posts\",\r\n            }\r\n            const response = await axios(option);\r\n            const posts = response.data.data.posts;\r\n            dispatch({ type: \"GET_ALL_POSTS\", payload: posts});\r\n        } catch(error){\r\n            console.log(error);\r\n        }\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        getAllPosts()\r\n    }, [getAllPosts])\r\n\r\n    const newPosts = posts.map((post) => {\r\n        if(user){\r\n            return post.author.name === user.userName\r\n                ? {...post, isEditable: true}\r\n                : post;\r\n        } else {\r\n            return {...post, isEditable: false}\r\n        }\r\n    });\r\n\r\n    return (\r\n        <section className=\"post-section\">\r\n            <div className=\"post-list\">\r\n                {/* Post item */}\r\n                {newPosts.map((post) => (\r\n                    <PostItem post={post} key={post._id} />   \r\n                ))}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}